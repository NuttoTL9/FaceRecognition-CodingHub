#!/usr/bin/env python3
"""
Debug script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ERPNext
"""
import os
import requests
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def check_env_variables():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    print("=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables ===")
    
    required_vars = [
        'FRAPPE_URL',
        'FRAPPE_API_KEY', 
        'FRAPPE_API_SECRET',
        'POSTGRES_USER',
        'POSTGRES_PASSWORD',
        'POSTGRES_HOST',
        'POSTGRES_DB'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value or value.startswith('your_'):
            missing_vars.append(var)
            print(f"‚ùå {var}: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default")
        else:
            print(f"‚úÖ {var}: {'*' * len(value)}")  # Hide sensitive values
    
    return len(missing_vars) == 0, missing_vars

def test_erpnext_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ERPNext"""
    print("\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ERPNext ===")
    
    frappe_url = os.getenv('FRAPPE_URL')
    frappe_api_key = os.getenv('FRAPPE_API_KEY')
    frappe_api_secret = os.getenv('FRAPPE_API_SECRET')
    
    if not all([frappe_url, frappe_api_key, frappe_api_secret]):
        print("‚ùå ERPNext configuration ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        return False
    
    try:
        # Test basic connection
        url = f"{frappe_url}/api/resource/Employee"
        params = {
            "fields": '["name"]',
            "limit": 1
        }
        auth = (frappe_api_key, frappe_api_secret)
        
        print(f"üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {frappe_url}")
        response = requests.get(url, params=params, auth=auth, timeout=10)
        
        if response.ok:
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ERPNext ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            data = response.json()
            print(f"üìä ‡∏û‡∏ö Employee ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(data.get('data', []))}")
            return True
        else:
            print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ERPNext ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ERPNext: {e}")
        return False

def test_postgres_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL"""
    print("\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL ===")
    
    try:
        import asyncpg
        import asyncio
        
        async def connect_db():
            user = os.getenv('POSTGRES_USER')
            password = os.getenv('POSTGRES_PASSWORD')
            host = os.getenv('POSTGRES_HOST', 'localhost')
            port = os.getenv('POSTGRES_PORT', '5432')
            database = os.getenv('POSTGRES_DB')
            
            if not all([user, password, database]):
                print("‚ùå PostgreSQL configuration ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                return False
            
            try:
                conn = await asyncpg.connect(
                    user=user,
                    password=password,
                    host=host,
                    port=port,
                    database=database
                )
                await conn.close()
                print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                return False
        
        return asyncio.run(connect_db())
        
    except ImportError:
        print("‚ùå asyncpg ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
        return False

def test_log_event_endpoint():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö log_event endpoint"""
    print("\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Log Event Endpoint ===")
    
    try:
        url = "http://localhost:8000/log_event/"
        payload = {
            "name": "TEST001",
            "event": "in"
        }
        
        response = requests.post(url, json=payload, timeout=5)
        
        if response.ok:
            print("‚úÖ Log Event endpoint ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
            print(f"Response: {response.json()}")
            return True
        else:
            print(f"‚ùå Log Event endpoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå FastAPI server ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Connection refused)")
        return False
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö endpoint: {e}")
        return False

def main():
    print("üîç Face Recognition ERPNext Debug Tool")
    print("=" * 50)
    
    # Check environment variables
    env_ok, missing_vars = check_env_variables()
    
    # Test connections
    erpnext_ok = test_erpnext_connection() if env_ok else False
    postgres_ok = test_postgres_connection() if env_ok else False
    endpoint_ok = test_log_event_endpoint()
    
    # Summary
    print("\n" + "=" * 50)
    print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
    print(f"Environment Variables: {'‚úÖ' if env_ok else '‚ùå'}")
    print(f"ERPNext Connection: {'‚úÖ' if erpnext_ok else '‚ùå'}")
    print(f"PostgreSQL Connection: {'‚úÖ' if postgres_ok else '‚ùå'}")
    print(f"FastAPI Endpoint: {'‚úÖ' if endpoint_ok else '‚ùå'}")
    
    if not env_ok:
        print(f"\n‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env:")
        for var in missing_vars:
            print(f"   - {var}")
    
    if not endpoint_ok:
        print(f"\n‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° FastAPI server:")
        print(f"   cd FastAPI && python3 -m uvicorn main_fastapi:app --host 0.0.0.0 --port 8000")
    
    all_ok = env_ok and erpnext_ok and postgres_ok and endpoint_ok
    print(f"\nüéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°: {'‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if all_ok else '‚ùå ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}")

if __name__ == "__main__":
    main()