# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import image_transform_pb2 as image__transform__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        'The grpc package installed is at version {}, but the generated code in image_transform_pb2_grpc.py depends on grpcio>={}. Please upgrade your grpc module to grpcio>={} or downgrade your generated code using grpcio-tools<={}.'.format(
            GRPC_VERSION, GRPC_GENERATED_VERSION, GRPC_GENERATED_VERSION, GRPC_VERSION
        )
    )


class EncodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_encode = channel.unary_unary(
                '/EncodeService/GetEncode',
                request_serializer=image__transform__pb2.sourceImage.SerializeToString,
                response_deserializer=image__transform__pb2.transformedImage.FromString,
                _registered_method=True)
        self.encode_vector = channel.unary_unary(
                '/EncodeService/EncodeVector',
                request_serializer=image__transform__pb2.VectorRequest.SerializeToString,
                response_deserializer=image__transform__pb2.VectorResponse.FromString,
                _registered_method=True)


class EncodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetEncode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncodeVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EncodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEncode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEncode,
                    request_deserializer=image__transform__pb2.sourceImage.FromString,
                    response_serializer=image__transform__pb2.transformedImage.SerializeToString,
            ),
            'EncodeVector': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeVector,
                    request_deserializer=image__transform__pb2.VectorRequest.FromString,
                    response_serializer=image__transform__pb2.VectorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EncodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('EncodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EncodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetEncode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EncodeService/GetEncode',
            image__transform__pb2.sourceImage.SerializeToString,
            image__transform__pb2.transformedImage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EncodeVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/EncodeService/EncodeVector',
            image__transform__pb2.VectorRequest.SerializeToString,
            image__transform__pb2.VectorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
